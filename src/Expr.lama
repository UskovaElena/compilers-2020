-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value

public fun evalOp(op, x, y) {
case op of
    "+" -> x + y
  | "-" -> x - y
  | "*" -> x * y
  | "/" -> x / y
  | "%" -> x % y
  | "&&" -> x && y
  | "!!" -> x !! y
  | "==" -> x == y
  | "!=" -> x != y
  | ">" -> x > y
  | "<" -> x < y
  | ">=" -> x >= y
  | "<=" -> x <= y
esac
}

public fun evalExpr (st, expr) {
case expr of
  Var (x) -> st (x)
| Const (x) -> x
| Binop (op, x, y) -> evalOp(op, evalExpr (st, x), evalExpr (st, y))
| -> failure ("evalExpr not implemented\n")
esac
}
  
